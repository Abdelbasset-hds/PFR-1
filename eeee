#include <stdio.h>
#include <string.h>

#define MAX_TOKENS 100  // Taille maximale du tableau de mots
#define MAX_WORD_LENGTH 50  // Taille maximale d'un mot

// Fonction pour décomposer la phrase en mots et les classer dans un tableau
int decompose_phrase(char *phrase, char tokens[MAX_TOKENS][MAX_WORD_LENGTH]) {
    int token_count = 0;  // Compteur de mots

    // Découper la phrase en mots en utilisant l'espace comme délimiteur
    char *token = strtok(phrase, " ");  // Découpe de la phrase
    while (token != NULL) {
        // Sauvegarder chaque mot dans le tableau
        strncpy(tokens[token_count], token, MAX_WORD_LENGTH - 1);
        tokens[token_count][MAX_WORD_LENGTH - 1] = '\0';  // S'assurer que le mot est terminé par un '\0'
        token_count++;  // Incrémenter le compteur de mots

        // Si le nombre de mots atteint la limite, sortir de la boucle
        if (token_count >= MAX_TOKENS) {
            break;
        }

        // Passer au mot suivant
        token = strtok(NULL, " ");
    }

    return token_count;  // Retourne le nombre de mots trouvés
}

int main() {
    char phrase[256];  // La phrase que l'utilisateur va entrer
    char tokens[MAX_TOKENS][MAX_WORD_LENGTH];  // Tableau pour stocker les mots

    // Demander à l'utilisateur d'entrer une phrase
    printf("Entrez une phrase : ");
    fgets(phrase, sizeof(phrase), stdin);

    // Enlever le caractère de nouvelle ligne à la fin de la phrase (si présent)
    phrase[strcspn(phrase, "\n")] = '\0';

    // Appeler la fonction de découpe de la phrase
    int token_count = decompose_phrase(phrase, tokens);

    // Afficher les mots découpés
    printf("Mots décomposés :\n");
    for (int i = 0; i < token_count; i++) {
        printf("Mot %d: %s\n", i + 1, tokens[i]);
    }

    return 0;
}
